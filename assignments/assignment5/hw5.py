
import pandas as pd
import pathlib
import numpy as np
import matplotlib.pyplot as plt
from typing import Union, Tuple

class QuestionnaireAnalysis:
    """
    Reads and analyzes data generated by the questionnaire experiment.
    Should be able to accept strings and pathlib.Path objects.
    """

    def __init__(self, data_fname: Union[pathlib.Path, str]):
        if type(data_fname) == str:
            data_fname = pathlib.Path(data_fname)
        if data_fname.is_file():
            self.data_fname = data_fname
        else:
            raise ValueError()

    def read_data(self):
        """Reads the json data located in self.data_fname into memory, to
        the attribute self.data.
        """
        self.data = pd.read_json(self.data_fname)
    
    """
    1. Plot the distribution of ages of the participants. 
    The bins for the histogram should be [0, 10), [10, 20), [20, 30), ..., [90, 100]. 
    The function should return the result.
    """
    def show_age_distrib(self) -> Tuple[np.ndarray, np.ndarray]:
       """Calculates and plots the age distribution of the participants.

       Returns
       -------
       hist : np.ndarray
        Number of people in a given bin
       bins : np.ndarray
        Bin edges
       """
       hist_ages = self.data["age"]
       hist_bins = range(0,101,10)
       hist, bins = np.histogram(hist_ages, hist_bins)
    #    _ = plt.hist(hist_ages, hist_bins)
    #    plt.title("Age Distribution")
    #    plt.show()
       return (hist, bins)
       
    """
    2. Participants without a valid email are useless since we can't contact them. 
    Remove all of the rows with an invalid address and return the new DataFrame.
    """
    def remove_rows_without_mail(self) -> pd.DataFrame:
       """Checks self.data for rows with invalid emails, and removes them.

      Returns
      -------
      df : pd.DataFrame
        A corrected DataFrame, i.e. the same table but with the erroneous rows removed and
        the (ordinal) index after a reset.
       """
       email_template = r".+@.+\..+"
       df = self.data.copy()
       df = df[df["email"].str.contains(email_template)].reset_index()
       return df

    """
    3. Some participants haven't answered all of the question. 
    It was decided that the grade for those missing questions will be the average grade of the other question for that subject. 
    Write a method that works on the original DataFrame (in `self.data`), 
    replaces the missing values with the mean for that subject in the other questions and returns the corrected DataFrame 
    as well as a `np.array` of the indices of the rows that were corrected.
    """
    def fill_na_with_mean(self) -> Tuple[pd.DataFrame, np.ndarray]:
       """Finds, in the original DataFrame, the subjects that didn't answer
       all questions, and replaces that missing value with the mean of the
       other grades for that student.

      Returns
      -------
      df : pd.DataFrame
        The corrected DataFrame after insertion of the mean grade
      arr : np.ndarray
        Row indices of the students that their new grades were generated
       """
       df = self.data.copy()
       grades = df.iloc[:,-5:]
       arr = grades.index[pd.isnull(grades).any(1)]
       df.iloc[:,-5:] = grades.fillna(grades.mean(axis = 1))
       return (df, arr)

    
    """
    4. Each participants should receive an integer score for his or her answers, 
    given in a new "score" column you should add. 
    After some deliberation it was decided that if a subject has no grade in two questions or more, 
    the score of that subject will be NA.
    Write a method that produces this score by averaging the grades of the not-NaN questions in the relevant rows.
    """
    def score_subjects(self, maximal_nans_per_sub: int = 1) -> pd.DataFrame:
       """Calculates the average score of a subject and adds a new "score" column
       with it.

       If the subject has more than "maximal_nans_per_sub" NaN in his grades, the
       score should be NA. Otherwise, the score is simply the mean of the other grades.
       The datatype of score is UInt8, and the floating point raw numbers should be
       rounded down.

       Parameters
       ----------
       maximal_nans_per_sub : int, optional
           Number of allowed NaNs per subject before giving a NA score.

       Returns
       -------
       pd.DataFrame
           A new DF with a new column - "score".
       """
       df = self.data.copy()
       grades = df.iloc[:,-5:]
       df["score"] = grades.mean(axis = 1).apply(np.floor).astype(pd.UInt8Dtype())
       null_grades = pd.isnull(grades).sum(axis = 1)
       df.loc[null_grades > maximal_nans_per_sub, "score"] = pd.NA
       return df
       
    
    """
    5. **BONUS 15 POINTS** There's reason to believe that there's a correlation between the subject's gender, age and grades.

    a. Use the original DataFrame and transform its index into a MultiIndex with three levels: 
    the ordinal index (row number), gender and age.

    b. Allocate the different subjects into groups based on two parameters: 
    Their gender, and whether their age is above or below 40. Hint - use `df.groupby`. The result should be similar to what is shown in the figure below (you don't have to plot it yourself).

    c. Return the DataFrame containing the average result per question per group.

    """
    def correlate_gender_age(self) -> pd.DataFrame:
       """Looks for a correlation between the gender of the subject, their age
       and the score for all five questions.

      Returns
      -------
      pd.DataFrame
       A DataFrame with a MultiIndex containing the gender and whether the subject is above
       40 years of age, and the average score in each of the five questions.
       
      [Average per group - result of `correlate_gender_age`](avg_per_group.png)
       """
       
   
